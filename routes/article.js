const router = require("koa-router")();
const { toTitle } = require("../scripts/toTitle");

const fs = require('fs');
const path = require("path");
const { promisify } = require('bluebird');
const readFile = promisify(fs.readFile);
const stat = promisify(fs.stat);
const md = require("markdown-it")({
    breaks: true,
    langPrefix: "lang-",
    linkify: true,
    typographer: false,
});

const slideList = require("../config/slideList.js");
const CONFIG  = require("../config/articleConfig.json");

let MongoClient = require("mongodb").MongoClient;
const DB_CONN_STR = require("../scripts/getDB");
/*
let getData = function(db, title) {
    return new Promise((resolve, reject) => {
        let collection = db.collection("blog");
        var where = { title: title }; // search by title
        collection.find(where).toArray(function(err, result) {
            if (err) {
                reject(err);
            }
            resolve(result);
        });
    });
};
*/
router.prefix("/article");

router.get("/:title", async (ctx, next) => {
    /*
    let db = await MongoClient.connect(DB_CONN_STR);
    let result = await getData(db, ctx.params.title);
    db.close();
    let obj = result[0];
    */
    const fpath = path.join(__dirname, "../md/", ctx.params.title + ".md");
    const mdsource = (await readFile(fpath))
        .toString()
        .replace("\uFEFF", "")
        .replace(/^(#+)([^\s#])/gim, "$1 $2");
    const html = md.render(mdsource);
    let hasSlide = false, slideImgs = [], slideParent = null;
    let imageSetting = null;
    //console.log(slideList, ctx.params.title);
    if(slideList.hasOwnProperty(ctx.params.title)) {
        hasSlide = true;
        imageSetting = slideList[ctx.params.title];
        slideImgs = slideList[ctx.params.title].images || [];
        console.log(slideImgs);
        slideParent = slideList[ctx.params.title]["parent-query"] || "";
    }
    const articleConfig = CONFIG[ctx.params.title] || {};
    let post_date = new Date();
    if(articleConfig.datetime) {
        post_date = new Date(articleConfig.datetime);
    } else {
        post_date = ((await stat(fpath)).mtime).toDateString();
    }
    let obj = {
        title: toTitle(ctx.params.title),
        main_html: html,
        description: articleConfig.description || "This page was generated by the THSCSLab Server automatically.",
        author: articleConfig.author || "THSCSLab",
        post_date: post_date,
    };
    /*if (obj === null || obj === undefined) {
        obj = {};
        console.log(
            new Date().toJSON() + " - 502 - obj is null or undefined; title =",
            ctx.params.title
        );
    }
    delete obj._id;*/
    if(hasSlide) {
        //console.log("slide!", slideImgs);
        ctx.body = await ctx.render("slide", {
            title: obj.title,
            _title: ctx.params.title,
            description: obj.description,
            main_html: obj.main_html,
            post_date: obj.post_date,
            author: obj.author || "",
            images: slideImgs,
            imageSetting: imageSetting,
        });
    } else { 
        ctx.body = await ctx.render("article", {
            title: toTitle(obj.title),
            description: obj.description,
            main_html: obj.main_html,
            post_date: obj.post_date,
            author: obj.author || "",
        });
    }
});

async function sleep(ms = 0) {
    if(typeof ms !== "number")
        throw new TypeError("ms is not a number (in async sleep(...))");
    return new Promise((resolve, reject) => {
        setTimeout(resolve, ms);
    });
}

module.exports = router;
